#!/usr/bin/python3
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You can find the license on Debian systems in the file
# /usr/share/common-licenses/GPL-2

# Copyright 2012 - St√©phane Graber <stgraber@ubuntu.com>

STEAM_URL = "http://media.steampowered.com/client/installer/steam.deb"

# NOTE: To remove once the API is stabilized
import warnings
warnings.filterwarnings("ignore", "The python-lxc API isn't yet stable")

import argparse
import contextlib
import grp
import lxc
import os
import pwd
import socket
import subprocess
import sys
import time


class SteamLXC():
    def __init__(self):
        self.user = pwd.getpwuid(int(os.environ['SUDO_UID']))
        self.group = grp.getgrgid(self.user.pw_gid)
        self.container = lxc.Container("%s-steam" % self.user.pw_name)

        # Avoid locale-related errors
        os.environ['LANG'] = "C.UTF-8"

        # Create the LXC dirs if missing
        for path in ("/var/lib/lxc", "/var/cache/lxc"):
            if not os.path.exists(path):
                os.makedirs(path)

        # Create the configuration directory
        self.config_path = "%s/.local/share/steam-lxc/" % self.user.pw_dir
        if not os.path.exists(self.config_path):
            print("Creating configuration directory")
            with self.user_privileges():
                os.makedirs(self.config_path)

        # Generate pulse socket
        self.pulse_socket = "%s/pulse.socket" % self.config_path
        if not os.path.exists(self.pulse_socket):
            with self.user_privileges():
                s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
                s.bind(self.pulse_socket)
                s.close()

    @contextlib.contextmanager
    def user_privileges(self):
        # Store previous values
        uid = os.geteuid()
        gid = os.getegid()

        os.setegid(self.user.pw_gid)
        os.seteuid(self.user.pw_uid)
        try:
            yield
        finally:
            os.setuid(uid)
            os.setgid(gid)

    def create(self):
        if self.container.defined:
            print("The container already exists.")
            return False

        # Create a base container
        if self.container.create("ubuntu",
                                 {"release": "precise", "arch": "i386"}):
            print("Container successfuly created")
        else:
            print("Failed to create the container")
            if self.container.defined:
                self.destroy()
            return False

        rootfs = self.container.get_config_item("lxc.rootfs")

        # Add a pre-mount hook that ensures the various paths exist and
        # have the right permissions
        mount_hook = "%s/pre-mount.sh" % "/".join(rootfs.split("/")[:-1])
        with open(mount_hook, "w+") as fd:
            fd.write("""#!/bin/sh
# Variables
ROOTFS="%s"
CONFIG="%s"
HOME="%s"
LXC_USER="%s"
LXC_UID="%s"
LXC_GID="%s"
LXC_HOME="$ROOTFS/home/$LXC_USER"

# Create the required paths
mkdir -p $ROOTFS/tmp/.X11-unix
mkdir -p $ROOTFS/dev/dri
mkdir -p $LXC_HOME

# Prepare X11
if [ -e "$HOME/.Xauthority" ]; then
    cp "$HOME/.Xauthority" "$LXC_HOME/.Xauthority"
else
    touch "$LXC_HOME/.Xauthority"
fi

# Prepare pulse
chown $LXC_UID.$LXC_GID $LXC_HOME
touch $LXC_HOME/.pulse_socket
chown $LXC_UID.$LXC_GID $LXC_HOME/.pulse_socket
chown $LXC_UID.$LXC_GID $LXC_HOME/.Xauthority

exit 0
""" % (rootfs, self.config_path, self.user.pw_dir, self.user.pw_name,
                self.user.pw_uid, self.user.pw_gid))
            os.fchmod(fd.fileno(), 0o755)

        self.container.set_config_item("lxc.hook.pre-mount", mount_hook)

        # Add the bind mounts to the container's fstab
        self.container.set_config_item("lxc.mount.entry",
                                       "/tmp/.X11-unix tmp/.X11-unix "
                                       "none bind,ro")
        self.container.set_config_item("lxc.mount.entry",
                                       "/dev/dri dev/dri none bind,ro")
        self.container.set_config_item("lxc.mount.entry",
                                       "%s/pulse.socket home/%s/.pulse_socket "
                                       "none bind,ro" % (self.config_path,
                                                         self.user.pw_name))

        # Allow access to /dev/dri
        self.container.append_config_item("lxc.cgroup.devices.allow",
                                          "c 226:* rwm")

        # Save the configuration
        self.container.save_config()

        # Prepare the container
        self.start()
        self.install()

    def destroy(self):
        if not self.container.defined:
            print("The container doesn't exist.")
            return False

        if self.container.running:
            self.container.stop()

        self.container.destroy()

    def install(self):
        # Remove default user account
        self.run_command(['deluser', 'ubuntu'], root=True)
        self.run_command(['rm', '-Rf', '/home/ubuntu'], root=True)

        # Create the new user account
        self.run_command(['adduser',
                          '--disabled-password',
                          '--force-badname',
                          '--uid', str(self.user.pw_uid),
                          '--gecos', self.user.pw_gecos,
                          self.user.pw_name], root=True)
        self.run_command(['adduser', self.user.pw_name, 'video'], root=True)

        # Update apt sources
        self.os_update()

        # Install initial dependencies
        self.install_packages("python-software-properties", "wget",
                              "pulseaudio", "gksu", "jockey-common",
                              "flashplugin-installer", "dmz-cursor-theme",
                              "language-pack-en", "fonts-liberation",
                              "ttf-ubuntu-font-family")

        # Install graphic packages
        # FIXME: Add support for non-intel
        self.install_packages("libgl1-mesa-glx")

        # Install required PPA
        self.run_command(
            ["apt-add-repository", "ppa:ubuntu-x-swat/x-updates", "--yes"],
            root=True)
        self.os_update()

        # Install steam
        self.install_steam()
        self.run_command(["mkdir", "-p", "%s/Desktop" % self.user.pw_dir])

        # Shutdown the container
        self.stop()

    def install_steam(self):
        self.run_command(["wget", STEAM_URL, "-O", "/tmp/steam.deb"])
        self.run_command(["dpkg", "-i", "/tmp/steam.deb"], root=True)
        self.install_packages("-f")
        self.run_command(["rm", "/tmp/steam.deb"])

    def install_packages(self, *packages):
        return self.run_command(
            ["apt-get", "install", "--yes", "--force-yes"] + list(packages),
            root=True)

    def run_command(self, command, env={}, root=False):
        env['LANG'] = "C.UTF-8"

        env = ["%s=%s" % (key, value)
               for key, value in env.items()]

        if root:
            self.container.attach_wait(
                lxc.attach_run_command, command,
                extra_env_vars=env)
        else:
            self.container.attach_wait(
                lxc.attach_run_command, command,
                uid=self.user.pw_uid, gid=self.user.pw_gid,
                extra_env_vars=env)

    def run(self):
        if not self.container.defined:
            print("The container doesn't exist, run with 'create' first.")
            return False

        self.start()

        # Get pulseaudio to listen on the socket
        with self.user_privileges():
            subprocess.call(['pactl', 'load-module',
                            'module-native-protocol-unix',
                            'socket=%s' % self.pulse_socket,
                            'auth-cookie-enabled=0'])

        # Start steam
        self.run_command(
            ["steam"], {'DISPLAY': os.environ['DISPLAY'],
                        'PULSE_SERVER': "/home/%s/.pulse_socket" %
                                        self.user.pw_name})

        self.stop()

    def start(self):
        self.container.start()

        if not self.container.wait('running', timeout=30):
            print("Container failed to start.")
            return False

        if not self.container.get_ips(timeout=30, interface="eth0"):
            print("Container failed to connect to network.")
            self.container.stop()
            return False

        # Wait a tiny bit of time to avoid a race with resolvconf
        time.sleep(2)

    def stop(self):
        if self.container.running:
            self.container.shutdown(timeout=30)

    def os_update(self):
        self.run_command(["apt-get", "update"], root=True)
        self.run_command(["apt-get", "dist-upgrade",
                          "--yes", "--force-yes"], root=True)
        self.run_command(["apt-get", "autoremove",
                          "--purge", "--yes", "--force-yes"], root=True)

    def update(self):
        self.start()

        self.os_update()
        self.install_steam()

        self.stop()


def main():
    parser = argparse.ArgumentParser(description="Manage a steam LXC "
                                                 "container")
    sp = parser.add_subparsers()

    sp_create = sp.add_parser("create",
                              help="Create the steam container")
    sp_create.set_defaults(func="create")

    sp_destroy = sp.add_parser("destroy",
                               help="Destroy the steam container")
    sp_destroy.set_defaults(func="destroy")

    sp_kill = sp.add_parser("kill",
                            help="Force kill a running container")
    sp_kill.set_defaults(func="stop")

    sp_run = sp.add_parser("run",
                           help="Start the container and execute steam")
    sp_run.set_defaults(func="run")

    sp_update = sp.add_parser("update",
                              help="Update the container and the "
                                   "steam package")
    sp_update.set_defaults(func="update")

    args = parser.parse_args()

    # Various pre-run validation
    if not hasattr(args, 'func'):
        parser.error("You must specify an action")

    if os.geteuid() != 0 or not 'SUDO_UID' in os.environ:
        parser.error("You must run this command under sudo. "
                     "Try running: sudo %s" % " ".join(sys.argv))

    if 'DISPLAY' not in os.environ:
        parser.error("You need to be running this command under X.")

    # Run the code
    steam = SteamLXC()
    getattr(steam, args.func)()

if __name__ == '__main__':
    main()
