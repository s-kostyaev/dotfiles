#!/usr/bin/env python2
import sqlite3
from bottle import route, run, debug, template, request, error, static_file #validate

import matplotlib
matplotlib.use('Agg')

import matplotlib.pyplot as plt
import pylab as pl

import numpy as np
#import os


@route('/')
@route('/todo')
@route('/my_todo_list')
def todo_list():
    conn = sqlite3.connect('todo.db')
    c = conn.cursor()
    c.execute("SELECT id, task FROM todo WHERE status LIKE '1'")
    result = c.fetchall()
    c.close()
    output = template('make_table', rows=result)
    return output #
#return str(result)

@route('/new', method='GET')
def new_item():
    if request.GET.get('save','').strip():
        new = request.GET.get('task', '').strip()
        conn = sqlite3.connect('todo.db')
        c = conn.cursor()
        query = "INSERT INTO todo (task,status) VALUES ('%s',1)" %new
        c.execute(query)
        conn.commit()
        c.execute("SELECT last_insert_rowid()")
        new_id = c.fetchone()[0]
        c.close
        return '<p>The new task was inserted into the database, the ID is %s</p>' %new_id
    else:
        return template('new_task.tpl')

#@route('/edit/:no', method='GET')
#@validate(no=int)
#def edit_item(no):
#
#    if request.GET.get('save','').strip():
#        edit = request.GET.get('task','').strip()
#        status = request.GET.get('status','').strip()
#
#        if status == 'open':
#            status = 1
#        else:
#            status = 0
#
#        conn = sqlite3.connect('todo.db')
#        c = conn.cursor()
#        query = "UPDATE todo SET task = '%s', status = '%s' WHERE id LIKE '%s'" % (edit,status,no)
#        c.execute(query)
#        conn.commit()
#
#        return '<p>The item number %d was successfully updated</p>' %no
#
#    else:
#        conn = sqlite3.connect('todo.db')
#        c = conn.cursor()
#        query = "SELECT task, status FROM todo WHERE id LIKE '%d'" %no
#        c.execute(query)
#        cur_data = c.fetchone()
#        #return str(cur_data)
#        return template('edit_task', old = cur_data, no = no)

@route('/images/bar1.png')
def send_image():
    #os.remove("tempfile.png")
    matplotlib.rcParams.update({'font.size': 20})
    randy=int(np.random.rand()*150)
    plt.bar(0 ,randy, width=0.5)
    pl.ylim(0,150)
    pl.xlim(0,0.2)
    fig = matplotlib.pyplot.gcf()
    plt.axes().get_xaxis().set_visible(False)
    fig.set_size_inches(4,12)
    pl.savefig("tempfile.png", format='png' , dpi=300)
    return static_file("tempfile.png", root='.', mimetype='image/png')

@route('/scripts/:scriptname')
def load_script(scriptname):
    return static_file(scriptname, root='./chartjs/')

@route('/bars/:value')
def create_bar(value):
    return template('create_bar', val = value)

@route('/temp')
def show_temp():
    return template('temp')

@route('/temp_data.csv')
def create_temp_data():
    return template('temp_data')

@route('/d3.v3.min.js')
def load_script_d3():
    return static_file("d3.v3.min.js", root=".")


@error(403)
def mistake403(code):
    return 'The parameter you passed has the wrong format!'

@error(404)
def mistake404(code):
    return 'Sorry, this page does not exist!'

debug(True)
#run()
run(reloader=True, host='192.168.1.19')
